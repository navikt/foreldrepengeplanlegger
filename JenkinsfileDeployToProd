@Library('deploy')
import deploy

def deployLib = new deploy()

node {
    def application = "foreldrepengeplanlegger"
    def version
    def zone = 'sbs'
    def namespace = 'default'

    stage('Deploy to Prod') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'nexusUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            def appPolicies = deployLib.buildAppPolicies(app)
            sh "echo '${appPolicies}' > app-policies.xml"
            sh "curl --fail -v -u ${env.USERNAME}:${env.PASSWORD} --upload-file app-policies.xml https://repo.adeo.no/repository/raw/${groupId}/${app}/${releaseVersion}/am/app-policies.xml"
            sh "curl --fail -v -u ${env.USERNAME}:${env.PASSWORD} --upload-file not-enforced-urls.txt https://repo.adeo.no/repository/raw/${groupId}/${app}/${releaseVersion}/am/not-enforced-urls.txt"
        }

        version = "${env.version}"
        callback = "${env.BUILD_URL}input/Deploy/"
        def deploy = deployLib.deployNaisApp(application, version, 'p', zone, namespace, callback, "Jenkins").key
        try {
            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "Check status here:  https://jira.adeo.no/browse/${deploy}"
            }
            slackSend([
                color: 'good',
                message: "${application} version ${version} has been deployed to production."
            ])
        } catch (Exception ex) {
            slackSend([
                color: 'danger',
                message: "Unable to deploy ${application} version ${version} to production. See https://jira.adeo.no/browse/${deploy} for details"
            ])
            throw new Exception("Deploy failed :( \n See https://jira.adeo.no/browse/" + deploy + " for details", ex)
        }
    }

}